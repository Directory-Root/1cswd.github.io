<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>听风</title>
  
  <subtitle>Hear the whisper of wind</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.1cswd.com/"/>
  <updated>2018-11-25T07:26:03.254Z</updated>
  <id>http://www.1cswd.com/</id>
  
  <author>
    <name>1cswd</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>相逢是问候，分手是祝愿。</title>
    <link href="http://www.1cswd.com/afo/"/>
    <id>http://www.1cswd.com/afo/</id>
    <published>2018-11-24T13:06:18.000Z</published>
    <updated>2018-11-25T07:26:03.254Z</updated>
    
    <content type="html"><![CDATA[<p>注：这是一篇蒙太奇式（并不算是）“文章”，只有几个句子且都不是出自我笔下。</p><p>在这一分别的时刻，我却硬是写不出哪怕一句话，虽然我清楚一旦我写出第一行，便会酣畅淋漓地写下去。但就是死活写不出那第一行。</p><a id="more"></a><blockquote><h3 id="Informatik-verbindet-dich-und-mich"><a href="#Informatik-verbindet-dich-und-mich" class="headerlink" title="Informatik verbindet dich und mich."></a>Informatik verbindet dich und mich.</h3><h3 id="Zeit-und-Raum-trennen-dich-und-mich"><a href="#Zeit-und-Raum-trennen-dich-und-mich" class="headerlink" title="Zeit und Raum trennen dich und mich."></a>Zeit und Raum trennen dich und mich.</h3><p>译：信息让你我连在一起，时空让你我分道扬镳。</p><p align="right">——2016 年省选题目</p></blockquote><blockquote><p>OI 像一首史诗 <code>Epic</code>，有残忍的竞争，也有共患难的兄弟。刘汝佳老师曾经在蓝书中写过 <code>第一章——思维的体操</code>，OI的确锻炼逻辑思维，要稳中求静，善于求解，要有宁可爆栈也要问到底的精神。然而 OI 所带来的远不止这些。</p><p align="right">——Ex10si0n</p></blockquote><blockquote><p>NOIP 总在这季节，令人伤感，又令人怀念。我曾经以为，OI 是我的出路，或许是我太功利的缘故吧。到头来才发现 OI 其实是自己的爱好。</p><p align="right">——GGN</p></blockquote><blockquote><p>或许说OI与我的交集仅仅两年时间，或许这两年稍纵即逝，但是OI让我相信到了自己没有那么差，刚刚只是有兴趣，然而后来就转变成了一个有力的 support，OI 让我学会了勤勤恳恳做人，稳稳当当做事，从刚开始每句代码都记不得打<code>;</code>到现在可以独立完成极其复杂的计算操作，其中的这种谨慎的精神，我可能学任何东西都没法做到。</p><p align="right">——Ex10si0n</p></blockquote><p>压轴一句：</p><blockquote><p>想到这里，我就悲哀得难以自禁。因为，直子连爱都没爱过我。</p><p align="right">——《挪威的森林》</p></blockquote><p>以及最后一句：</p><blockquote><p>OI路上，感谢有你陪伴。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注：这是一篇蒙太奇式（并不算是）“文章”，只有几个句子且都不是出自我笔下。&lt;/p&gt;
&lt;p&gt;在这一分别的时刻，我却硬是写不出哪怕一句话，虽然我清楚一旦我写出第一行，便会酣畅淋漓地写下去。但就是死活写不出那第一行。&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="http://www.1cswd.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="日常" scheme="http://www.1cswd.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="信息学" scheme="http://www.1cswd.com/tags/%E4%BF%A1%E6%81%AF%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>V2Ray 的 WebSocket 配置</title>
    <link href="http://www.1cswd.com/V2Ray-WebSocket/"/>
    <id>http://www.1cswd.com/V2Ray-WebSocket/</id>
    <published>2018-11-19T15:53:27.000Z</published>
    <updated>2018-11-25T07:25:50.511Z</updated>
    
    <content type="html"><![CDATA[<p>之前有报道称 Shadowsocks 协议已经被特征化识别且防火墙即将开始主动嗅探，并且拿了一份大学论文做证据：</p><p><a href="https://www.1cswd.com/Shadowsocks-Sniffing.pdf">Shadowsocks Sniffing.pdf</a></p><p>反正我是不信的，特别是我看到里面说“客户端和服务端使用 SOCKS5 协议连接”时，我更加清楚这是一篇造假或充数的论文<del>（若维护长城防火墙的都是这种人的话我甚至觉得 Shadowosocks 可以至少再续两年命）</del>。</p><p>很快又有人申请了一个所谓可以嗅探 Shadowsocks 的专利：</p><p><a href="https://www.google.com/patents/CN105281973A" target="_blank" rel="noopener">一种针对特定网站类别的网页指纹识别方法</a></p><p>由于不清楚详细信息，这个检测方式我不好评论，但我仍然不认为 Shadowsocks 会在它主攻的 Shadowy 方面被人找出什么漏洞。</p><p>但事实证明我错了：2018年一月的某天，我的 Shadowosocks 突然变得奇慢无比，后来根本无法连接。在另一端口重新配置后可以重新连接，却很快又会莫名死掉，换成原端口仍无法连接，而每个新端口仅可勉强续命十几分钟。</p><p>（P.S. 尝试过使用 http-simple 混淆，加密一直使用 AES-128-GCM）</p><p>我立刻明白——被封端口了。</p><p>不管如何解释，但无法改变的事实是， Shadowsocks 协议好像真的被分析出特征了。</p><p>曾想过使用 ShadowsocksR 来代替，但是出于由 <a href="https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168" target="_blank" rel="noopener">clowwindy 与 Breakwa11 的争吵</a>产生的对 ShadowsocksR 的反感（我认为遵守 GPL 等协议是开源社区开发者最基本的素质），后来还是放弃了。</p><p>所以我需要一种新的代理工具和协议。</p><p>于是我发现了 <a href="https://www.v2ray.com/" target="_blank" rel="noopener">V2Ray</a>,一个模块化的代理软件包，它的目标是提供常用的代理软件模块，简化网络代理软件的开发。</p><a id="more"></a><h3 id="伪装思路"><a href="#伪装思路" class="headerlink" title="伪装思路"></a>伪装思路</h3><p>通过 Nginx 监听 443 端口，将 V2Ray 的请求转发到内网的服务端，而普通请求则返回一个网页，从而将服务器伪装成一个网页服务器。由 WebSocket 技术实现。</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>首先你需要一个已经解析到你的服务器的域名，设置一个二级域名用作代理。</p><p>由于 V2Ray 正常工作需要服务端与客户端的时间一致，所以需要使用 NTPdate 进行时间校正。（具体原因参见<a href="https://www.v2ray.com/chapter_03/01_effective.html" target="_blank" rel="noopener">《Effective V2Ray》</a>）</p><h4 id="安装-NTPdate："><a href="#安装-NTPdate：" class="headerlink" title="安装 NTPdate："></a>安装 NTPdate：</h4><h4 id="RedHat-系："><a href="#RedHat-系：" class="headerlink" title="RedHat 系："></a>RedHat 系：</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">yum install ntpdate -y</span><br></pre></td></tr></table></figure><h4 id="Debian-系："><a href="#Debian-系：" class="headerlink" title="Debian 系："></a>Debian 系：</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install ntpdate -y</span><br></pre></td></tr></table></figure><h4 id="进行时间校正："><a href="#进行时间校正：" class="headerlink" title="进行时间校正："></a>进行时间校正：</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">systemctl stop ntp &amp;&gt;/dev/null</span><br><span class="line">ntpdate time.nist.gov</span><br></pre></td></tr></table></figure><h4 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="安装依赖："></a>安装依赖：</h4><h4 id="RedHat-系：-1"><a href="#RedHat-系：-1" class="headerlink" title="RedHat 系："></a>RedHat 系：</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">yum -y install wget curl lsof crontabs net-tools bc unzip socat nc nginx</span><br></pre></td></tr></table></figure><h4 id="Debian-系：-1"><a href="#Debian-系：-1" class="headerlink" title="Debian 系："></a>Debian 系：</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">apt-get -y install wget curl lsof cron net-tools bc unzip socat netcat nginx</span><br></pre></td></tr></table></figure><h4 id="为了后期进行长期的维护，这里推荐使用官方安装脚本而非后文的直接下载："><a href="#为了后期进行长期的维护，这里推荐使用官方安装脚本而非后文的直接下载：" class="headerlink" title="为了后期进行长期的维护，这里推荐使用官方安装脚本而非后文的直接下载："></a><strong>为了后期进行长期的维护，这里推荐使用官方安装脚本而非后文的直接下载：</strong></h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h4 id="下载-V2Ray-Core："><a href="#下载-V2Ray-Core：" class="headerlink" title="下载 V2Ray-Core："></a><del>下载 V2Ray-Core：</del></h4><h4 id="32位："><a href="#32位：" class="headerlink" title="32位："></a><del>32位：</del></h4><p><del><a href="https://github.com/v2ray/v2ray-core/releases/download/v3.14/v2ray-linux-32.zip" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases/download/v3.14/v2ray-linux-32.zip</a> &amp;&amp; unzip ./v2ray-linux-32.zip</del></p><h4 id="64位："><a href="#64位：" class="headerlink" title="64位："></a><del>64位：</del></h4><p><del><a href="https://github.com/v2ray/v2ray-core/releases/download/v3.14/v2ray-linux-64.zip" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases/download/v3.14/v2ray-linux-64.zip</a> &amp;&amp; unzip ./v2ray-linux-64.zip</del></p><h4 id="把-V2Ray-移动到-etc-v2ray"><a href="#把-V2Ray-移动到-etc-v2ray" class="headerlink" title="把 V2Ray 移动到 /etc/v2ray/"></a><del>把 V2Ray 移动到 /etc/v2ray/</del></h4><h4 id="生成证书："><a href="#生成证书：" class="headerlink" title="生成证书："></a>生成证书：</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br><span class="line">~/.acme.sh/acme.sh --issue -d 你的域名 --standalone -k ec-256 --force</span><br><span class="line">~/.acme.sh/acme.sh --installcert -d 你的域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc</span><br></pre></td></tr></table></figure><h4 id="写入配置文件到-etc-v2ray-config-json"><a href="#写入配置文件到-etc-v2ray-config-json" class="headerlink" title="写入配置文件到 /etc/v2ray/config.json:"></a>写入配置文件到 /etc/v2ray/config.json:</h4><figure class="highlight json hljs"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"inbound"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"port"</span>: <span class="hljs-number">10000</span>,</span><br><span class="line">    <span class="hljs-attr">"listen"</span>:<span class="hljs-string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"vmess"</span>,</span><br><span class="line">    <span class="hljs-attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="hljs-attr">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="hljs-attr">"id"</span>: <span class="hljs-string">"随机生成一个UUID填入"</span>,</span><br><span class="line">          <span class="hljs-attr">"alterId"</span>: <span class="hljs-number">64</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-attr">"streamSettings"</span>:&#123;</span><br><span class="line">      <span class="hljs-attr">"network"</span>:<span class="hljs-string">"ws"</span>,</span><br><span class="line">      <span class="hljs-attr">"wsSettings"</span>: &#123;</span><br><span class="line">      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/Proxy/"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"outbound"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"protocol"</span>: <span class="hljs-string">"freedom"</span>,</span><br><span class="line">    <span class="hljs-attr">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写入-Nginx-配置到-etc-nginx-conf-d-v2ray-conf："><a href="#写入-Nginx-配置到-etc-nginx-conf-d-v2ray-conf：" class="headerlink" title="写入 Nginx 配置到 /etc/nginx/conf.d/v2ray.conf："></a>写入 Nginx 配置到 /etc/nginx/conf.d/v2ray.conf：</h4><figure class="highlight nginx hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-section">server</span> &#123;</span><br><span class="line">        <span class="hljs-attribute">if</span> ( <span class="hljs-variable">$request_uri</span> !<span class="hljs-regexp">~ /Proxy/</span> ) &#123;</span><br><span class="line">               <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> https://你的一级域名/<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-attribute">listen</span>  <span class="hljs-number">443</span> ssl;</span><br><span class="line">        <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;</span><br><span class="line">        <span class="hljs-attribute">ssl_certificate</span>       /etc/v2ray/v2ray.crt;</span><br><span class="line">        <span class="hljs-attribute">ssl_certificate_key</span>   /etc/v2ray/v2ray.key;</span><br><span class="line">        <span class="hljs-attribute">ssl_protocols</span>         TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-attribute">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="hljs-attribute">server_name</span>           你的完整二级域名;</span><br><span class="line">        <span class="hljs-attribute">location</span> /Proxy/ &#123;</span><br><span class="line">        <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;</span><br><span class="line">        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:10000;</span><br><span class="line">        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-attribute">proxy_set_header</span> Upgrade \<span class="hljs-variable">$http_upgrade</span>;</span><br><span class="line">        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">"upgrade"</span>;</span><br><span class="line">        <span class="hljs-attribute">proxy_set_header</span> Host \<span class="hljs-variable">$http_host</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写入默认-Nginx-配置到-etc-nginx-conf-d-default-conf："><a href="#写入默认-Nginx-配置到-etc-nginx-conf-d-default-conf：" class="headerlink" title="写入默认 Nginx 配置到 /etc/nginx/conf.d/default.conf："></a>写入默认 Nginx 配置到 /etc/nginx/conf.d/default.conf：</h4><figure class="highlight nginx hljs"><table><tr><td class="code"><pre><span class="line"><span class="hljs-section">server</span> &#123;</span><br><span class="line"> <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;</span><br><span class="line"> <span class="hljs-attribute">server_name</span> localhost;</span><br><span class="line"> <span class="hljs-comment">#charset koi8-r;</span></span><br><span class="line"> <span class="hljs-comment">#access_log /var/log/nginx/host.access.log main;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attribute">location</span> / &#123;</span><br><span class="line"> <span class="hljs-attribute">root</span> /usr/share/nginx/html;</span><br><span class="line"> <span class="hljs-attribute">index</span> index.html index.htm;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#error_page 404 /404.html;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line"> <span class="hljs-comment">#</span></span><br><span class="line"> <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /50x.html;</span><br><span class="line"> <span class="hljs-attribute">location</span> = /50x.html &#123;</span><br><span class="line"> <span class="hljs-attribute">root</span> /usr/share/nginx/html;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 /usr/share/nginx/html 制作一个伪装页面。</p><h4 id="重启-Nginx-并启动-V2Ray"><a href="#重启-Nginx-并启动-V2Ray" class="headerlink" title="重启 Nginx 并启动 V2Ray:"></a>重启 Nginx 并启动 V2Ray:</h4><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">/usr/nginx/sbin/nginx -s reload</span><br><span class="line">nohup /etc/v2ray/v2ray -config /etc/v2ray/config.json &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>使用客户端连接即可，大功告成！</p><h3 id="客户端配置："><a href="#客户端配置：" class="headerlink" title="客户端配置："></a>客户端配置：</h3><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">地址：你的完整二级域名</span><br><span class="line">端口：443</span><br><span class="line">用户ID：生成的 UUID</span><br><span class="line">AlterID：64</span><br><span class="line">加密方式：随意（手机推荐 chacha20-ietf，电脑推荐 AES-128-GCM）</span><br><span class="line">传输协议：WebSocket</span><br><span class="line">伪装类型：无需伪装</span><br><span class="line">伪装域名：/Proxy/</span><br><span class="line">底层安全：TLS</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有报道称 Shadowsocks 协议已经被特征化识别且防火墙即将开始主动嗅探，并且拿了一份大学论文做证据：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.1cswd.com/Shadowsocks-Sniffing.pdf&quot;&gt;Shadowsocks Sniffing.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;反正我是不信的，特别是我看到里面说“客户端和服务端使用 SOCKS5 协议连接”时，我更加清楚这是一篇造假或充数的论文&lt;del&gt;（若维护长城防火墙的都是这种人的话我甚至觉得 Shadowosocks 可以至少再续两年命）&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;很快又有人申请了一个所谓可以嗅探 Shadowsocks 的专利：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/patents/CN105281973A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一种针对特定网站类别的网页指纹识别方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;由于不清楚详细信息，这个检测方式我不好评论，但我仍然不认为 Shadowsocks 会在它主攻的 Shadowy 方面被人找出什么漏洞。&lt;/p&gt;
&lt;p&gt;但事实证明我错了：2018年一月的某天，我的 Shadowosocks 突然变得奇慢无比，后来根本无法连接。在另一端口重新配置后可以重新连接，却很快又会莫名死掉，换成原端口仍无法连接，而每个新端口仅可勉强续命十几分钟。&lt;/p&gt;
&lt;p&gt;（P.S. 尝试过使用 http-simple 混淆，加密一直使用 AES-128-GCM）&lt;/p&gt;
&lt;p&gt;我立刻明白——被封端口了。&lt;/p&gt;
&lt;p&gt;不管如何解释，但无法改变的事实是， Shadowsocks 协议好像真的被分析出特征了。&lt;/p&gt;
&lt;p&gt;曾想过使用 ShadowsocksR 来代替，但是出于由 &lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-windows/issues/293#issuecomment-132253168&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;clowwindy 与 Breakwa11 的争吵&lt;/a&gt;产生的对 ShadowsocksR 的反感（我认为遵守 GPL 等协议是开源社区开发者最基本的素质），后来还是放弃了。&lt;/p&gt;
&lt;p&gt;所以我需要一种新的代理工具和协议。&lt;/p&gt;
&lt;p&gt;于是我发现了 &lt;a href=&quot;https://www.v2ray.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;V2Ray&lt;/a&gt;,一个模块化的代理软件包，它的目标是提供常用的代理软件模块，简化网络代理软件的开发。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://www.1cswd.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://www.1cswd.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="技术" scheme="http://www.1cswd.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="V2Ray" scheme="http://www.1cswd.com/tags/V2Ray/"/>
    
  </entry>
  
  <entry>
    <title>使用 Net-Speeder 加速高丢包率环境下的网络连接</title>
    <link href="http://www.1cswd.com/net-speeder/"/>
    <id>http://www.1cswd.com/net-speeder/</id>
    <published>2018-10-28T15:47:24.000Z</published>
    <updated>2018-11-25T07:25:28.830Z</updated>
    
    <content type="html"><![CDATA[<p>使用美国 VPS 搭建个人梯子最令人难以忍受的问题是什么？</p><p>丢包率。</p><p>使用 cn2 线路的节点不足 200ms 的延迟只要你不是用来玩游戏之外都不会有太大感知， 10Gbps 的带宽也绝对不会对你的连接速度造成瓶颈，但从自由大陆漂洋过海的数据很难保证没有丢失。</p><p>所以诞生了很多解决方案，比如锐速。</p><p>但众所周知的是锐速并不支持 OpenVZ 的 Container 式虚拟化方案（而且它不开源）， BBR 的效果又难以让人满意，所以对于使用 OpenVZ 的用户（穷人）来说只剩了两个令人满意的优化方案：Net Speeder 和 KCPtun。</p><p>本篇主要讲前者的使用。</p><a id="more"></a><p>推荐 Net Speeder 的理由很简单：</p><p>-极小的占用<br>-开源且<del>简单</del>到只有 NOIp 水平的代码</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="从-GitHub-下载源码"><a href="#从-GitHub-下载源码" class="headerlink" title="从 GitHub 下载源码"></a>从 GitHub 下载源码</h3><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/snooda/net-speeder/master/net_speeder.c</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>RedHat 系：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">yum install -y libnet libnet-devel libpcap libpcap-devel gcc</span><br></pre></td></tr></table></figure><p>Debian 系：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">apt-get install -y libpcap-dev libnet-dev libnids-dev gcc</span><br></pre></td></tr></table></figure><h3 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h3><p>OpenVZ：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">gcc ./net_speeder.c -o net_speeder -O2 -lpcap -lnet -DCOOKED</span><br></pre></td></tr></table></figure><p>KVM：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">gcc ./net_speeder.c -o net_speeder -O2 -lpcap -lnet</span><br></pre></td></tr></table></figure><p>（相信玄学的人和强迫症可以使用 O3 优化）</p><h3 id="启动-Net-Speeder"><a href="#启动-Net-Speeder" class="headerlink" title="启动 Net Speeder"></a>启动 Net Speeder</h3><p>OpenVZ：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">nohup ./net_speeder venet0 <span class="hljs-string">"ip"</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>KVM：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">nohup ./net_speeder eth0 <span class="hljs-string">"ip"</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>加入开机启动：</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">vim /etc/profile.d/net_speeder.sh</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain hljs"><table><tr><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">你 VPS 类型对应的启动命令（需要绝对地址）</span><br></pre></td></tr></table></figure><p>:wq 保存并退出即可。</p><figure class="highlight bash hljs"><table><tr><td class="code"><pre><span class="line">ping -c 4 google.com</span><br></pre></td></tr></table></figure><p>若显示有 duplicate 则配置成功。</p><p>但 Net Speeder 并不是没有缺点的，由于它强制双倍发包的策略，在丢包率低的时候，反而可能会减慢网络速度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用美国 VPS 搭建个人梯子最令人难以忍受的问题是什么？&lt;/p&gt;
&lt;p&gt;丢包率。&lt;/p&gt;
&lt;p&gt;使用 cn2 线路的节点不足 200ms 的延迟只要你不是用来玩游戏之外都不会有太大感知， 10Gbps 的带宽也绝对不会对你的连接速度造成瓶颈，但从自由大陆漂洋过海的数据很难保证没有丢失。&lt;/p&gt;
&lt;p&gt;所以诞生了很多解决方案，比如锐速。&lt;/p&gt;
&lt;p&gt;但众所周知的是锐速并不支持 OpenVZ 的 Container 式虚拟化方案（而且它不开源）， BBR 的效果又难以让人满意，所以对于使用 OpenVZ 的用户（穷人）来说只剩了两个令人满意的优化方案：Net Speeder 和 KCPtun。&lt;/p&gt;
&lt;p&gt;本篇主要讲前者的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://www.1cswd.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://www.1cswd.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Net-Speeder" scheme="http://www.1cswd.com/tags/Net-Speeder/"/>
    
  </entry>
  
</feed>
