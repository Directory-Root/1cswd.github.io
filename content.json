{"pages":[{"title":"关于","text":"关于名字因为曾经直播在 Linux 主机上（当然是虚拟机）执行过如下命令，所以就索性把 ID 改成根目录了： sudo rm -rf --no-preserve-root / 1cswd 则是上古时代神器“冰刃(Ice Sword)”的缩写。 站点的名字来自村上春树先生的成名作《且听风吟》。 关于我假的技术宅； 假的 1/4 个 ACGN 爱好者； 假的 OIer； 可能是真的书法爱好者，现在在用的书写工具是 Pilot Justus95（就是那个可调软硬的奇葩），配合鲇鱼永(ran)恒(jian)黑墨水； 但是字写得比较烂； 话多；话很多；话非常多； 中度红绿色盲； 强迫症 &amp;&amp; 懒癌 &amp;&amp; 拖延症晚期； 擅长使用 C++、Java、Python 开发 BUG； 认为 C/C++ 编译器除了 GCC 和 G++ 外都是异端； 讨厌 Visual Studio 却大爱 VSCode； 对前端三剑客中的一个半一窍不通； 现在使用个人魔改版 V2Ray+WebSocket+Nginx(TLS1.3 draft28) 爬墙； 联系方式e-mail: root#directory-root.com/me#1cswd.com（typedef # @，推荐）； Steam: 1cswd；","link":"/about/index.html"}],"posts":[{"title":"相逢是问候，分手是祝愿。","text":"注：这是一篇蒙太奇式（并不算是）“文章”，只有几个句子且都不是出自我笔下。 在这一分别的时刻，我却硬是写不出哪怕一句话，虽然我清楚一旦我写出第一行，便会酣畅淋漓地写下去。但就是死活写不出那第一行。 Informatik verbindet dich und mich.Zeit und Raum trennen dich und mich.译：信息让你我连在一起，时空让你我分道扬镳。 ——2016 年省选题目 OI 像一首史诗 Epic，有残忍的竞争，也有共患难的兄弟。刘汝佳老师曾经在蓝书中写过 第一章——思维的体操，OI的确锻炼逻辑思维，要稳中求静，善于求解，要有宁可爆栈也要问到底的精神。然而 OI 所带来的远不止这些。 ——Ex10si0n NOIP 总在这季节，令人伤感，又令人怀念。我曾经以为，OI 是我的出路，或许是我太功利的缘故吧。到头来才发现 OI 其实是自己的爱好。 ——GGN 或许说OI与我的交集仅仅两年时间，或许这两年稍纵即逝，但是OI让我相信到了自己没有那么差，刚刚只是有兴趣，然而后来就转变成了一个有力的 support，OI 让我学会了勤勤恳恳做人，稳稳当当做事，从刚开始每句代码都记不得打;到现在可以独立完成极其复杂的计算操作，其中的这种谨慎的精神，我可能学任何东西都没法做到。 ——Ex10si0n 压轴一句： 想到这里，我就悲哀得难以自禁。因为，直子连爱都没爱过我。 ——《挪威的森林》 以及最后一句： OI路上，感谢有你陪伴。","link":"/afo/"},{"title":"V2Ray 的 WebSocket 配置","text":"之前有报道称 Shadowsocks 协议已经被特征化识别且防火墙即将开始主动嗅探，并且拿了一份大学论文做证据： Shadowsocks Sniffing.pdf 反正我是不信的，特别是我看到里面说“客户端和服务端使用 SOCKS5 协议连接”时，我更加清楚这是一篇造假或充数的论文（若维护长城防火墙的都是这种人的话我甚至觉得 Shadowosocks 可以至少再续两年命）。 很快又有人申请了一个所谓可以嗅探 Shadowsocks 的专利： 一种针对特定网站类别的网页指纹识别方法 由于不清楚详细信息，这个检测方式我不好评论，但我仍然不认为 Shadowsocks 会在它主攻的 Shadowy 方面被人找出什么漏洞。 但事实证明我错了：2018年一月的某天，我的 Shadowosocks 突然变得奇慢无比，后来根本无法连接。在另一端口重新配置后可以重新连接，却很快又会莫名死掉，换成原端口仍无法连接，而每个新端口仅可勉强续命十几分钟。 （P.S. 尝试过使用 http-simple 混淆，加密一直使用 AES-128-GCM） 我立刻明白——被封端口了。 不管如何解释，但无法改变的事实是， Shadowsocks 协议好像真的被分析出特征了。 曾想过使用 ShadowsocksR 来代替，但是出于由 clowwindy 与 Breakwa11 的争吵产生的对 ShadowsocksR 的反感（我认为遵守 GPL 等协议是开源社区开发者最基本的素质），后来还是放弃了。 所以我需要一种新的代理工具和协议。 于是我发现了 V2Ray,一个模块化的代理软件包，它的目标是提供常用的代理软件模块，简化网络代理软件的开发。 伪装思路通过 Nginx 监听 443 端口，将 V2Ray 的请求转发到内网的服务端，而普通请求则返回一个网页，从而将服务器伪装成一个网页服务器。由 WebSocket 技术实现。 安装步骤首先你需要一个已经解析到你的服务器的域名，设置一个二级域名用作代理。 由于 V2Ray 正常工作需要服务端与客户端的时间一致，所以需要使用 NTPdate 进行时间校正。（具体原因参见《Effective V2Ray》） 安装 NTPdate：RedHat 系：yum install ntpdate -y Debian 系：apt-get update &amp;&amp; apt-get install ntpdate -y 进行时间校正：systemctl stop ntp &amp;&gt;/dev/nullntpdate time.nist.gov 安装依赖：RedHat 系：yum -y install wget curl lsof crontabs net-tools bc unzip socat nc nginx Debian 系：apt-get -y install wget curl lsof cron net-tools bc unzip socat netcat nginx 为了后期进行长期的维护，这里推荐使用官方安装脚本而非后文的直接下载：bash &lt;(curl -L -s https://install.direct/go.sh) 下载 V2Ray-Core：32位：https://github.com/v2ray/v2ray-core/releases/download/v3.14/v2ray-linux-32.zip &amp;&amp; unzip ./v2ray-linux-32.zip 64位：https://github.com/v2ray/v2ray-core/releases/download/v3.14/v2ray-linux-64.zip &amp;&amp; unzip ./v2ray-linux-64.zip 把 V2Ray 移动到 /etc/v2ray/生成证书：curl https://get.acme.sh | sh~/.acme.sh/acme.sh --issue -d 你的域名 --standalone -k ec-256 --force~/.acme.sh/acme.sh --installcert -d 你的域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc 写入配置文件到 /etc/v2ray/config.json:{ \"inbound\": { \"port\": 10000, \"listen\":\"127.0.0.1\", \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"随机生成一个UUID填入\", \"alterId\": 64 } ] }, \"streamSettings\":{ \"network\":\"ws\", \"wsSettings\": { \"path\": \"/Proxy/\" } } }, \"outbound\": { \"protocol\": \"freedom\", \"settings\": {} }} 写入 Nginx 配置到 /etc/nginx/conf.d/v2ray.conf：server { if ( $request_uri !~ /Proxy/ ) { rewrite ^/(.*)$ https://你的一级域名/$1 permanent; } listen 443 ssl; ssl on; ssl_certificate /etc/v2ray/v2ray.crt; ssl_certificate_key /etc/v2ray/v2ray.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; server_name 你的完整二级域名; location /Proxy/ { proxy_redirect off; proxy_pass http://127.0.0.1:10000; proxy_http_version 1.1; proxy_set_header Upgrade \\$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host \\$http_host; }} 写入默认 Nginx 配置到 /etc/nginx/conf.d/default.conf：server { listen 80; server_name localhost; #charset koi8-r; #access_log /var/log/nginx/host.access.log main;location / { root /usr/share/nginx/html; index index.html index.htm; }#error_page 404 /404.html;# redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; }} 在 /usr/share/nginx/html 制作一个伪装页面。 重启 Nginx 并启动 V2Ray:/usr/nginx/sbin/nginx -s reloadnohup /etc/v2ray/v2ray -config /etc/v2ray/config.json &gt; /dev/null 2&gt;&amp;1 &amp; 使用客户端连接即可，大功告成！ 客户端配置：地址：你的完整二级域名端口：443用户ID：生成的 UUIDAlterID：64加密方式：随意（手机推荐 chacha20-ietf，电脑推荐 AES-128-GCM）传输协议：WebSocket伪装类型：无需伪装伪装域名：/Proxy/底层安全：TLS","link":"/V2Ray-WebSocket/"},{"title":"使用 Net-Speeder 加速高丢包率环境下的网络连接","text":"使用美国 VPS 搭建个人梯子最令人难以忍受的问题是什么？ 丢包率。 使用 cn2 线路的节点不足 200ms 的延迟只要你不是用来玩游戏之外都不会有太大感知， 10Gbps 的带宽也绝对不会对你的连接速度造成瓶颈，但从自由大陆漂洋过海的数据很难保证没有丢失。 所以诞生了很多解决方案，比如锐速。 但众所周知的是锐速并不支持 OpenVZ 的 Container 式虚拟化方案（而且它不开源）， BBR 的效果又难以让人满意，所以对于使用 OpenVZ 的用户（穷人）来说只剩了两个令人满意的优化方案：Net Speeder 和 KCPtun。 本篇主要讲前者的使用。 推荐 Net Speeder 的理由很简单： -极小的占用-开源且简单到只有 NOIp 水平的代码 安装从 GitHub 下载源码wget https://raw.githubusercontent.com/snooda/net-speeder/master/net_speeder.c 安装依赖RedHat 系： yum install -y libnet libnet-devel libpcap libpcap-devel gcc Debian 系： apt-get install -y libpcap-dev libnet-dev libnids-dev gcc 进行编译OpenVZ： gcc ./net_speeder.c -o net_speeder -O2 -lpcap -lnet -DCOOKED KVM： gcc ./net_speeder.c -o net_speeder -O2 -lpcap -lnet （相信玄学的人和强迫症可以使用 O3 优化） 启动 Net SpeederOpenVZ： nohup ./net_speeder venet0 \"ip\" &gt; /dev/null 2&gt;&amp;1 &amp; KVM： nohup ./net_speeder eth0 \"ip\" &gt; /dev/null 2&gt;&amp;1 &amp; 加入开机启动： vim /etc/profile.d/net_speeder.sh 输入 #! /bin/sh你 VPS 类型对应的启动命令（需要绝对地址） :wq 保存并退出即可。 ping -c 4 google.com 若显示有 duplicate 则配置成功。 但 Net Speeder 并不是没有缺点的，由于它强制双倍发包的策略，在丢包率低的时候，反而可能会减慢网络速度。","link":"/net-speeder/"}],"tags":[{"name":"日常","slug":"日常","link":"/tags/日常/"},{"name":"信息学","slug":"信息学","link":"/tags/信息学/"},{"name":"网络","slug":"网络","link":"/tags/网络/"},{"name":"技术","slug":"技术","link":"/tags/技术/"},{"name":"V2Ray","slug":"V2Ray","link":"/tags/V2Ray/"},{"name":"Net-Speeder","slug":"Net-Speeder","link":"/tags/Net-Speeder/"}],"categories":[{"name":"日常","slug":"日常","link":"/categories/日常/"},{"name":"网络","slug":"网络","link":"/categories/网络/"}]}